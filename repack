#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
BEXT="sb"
COMP_TYPE="xz"

function repack_module() {
    OLD_MODULE=$MODULE
    MODULE=${MODULE%"-$OLD_COMP_TYPE.$BEXT"}
    if [ $COMP_TYPE = $OLD_COMP_TYPE ]; then
        echo "The module is already in the required compression format." && exit
    fi
    unsquashfs $OLD_MODULE
    if [ $COMP_TYPE = "zstd" ]; then
        time mksquashfs $SCRIPT_DIR/squashfs-root $MODULE-$COMP_TYPE.$BEXT -comp $COMP_TYPE -Xcompression-level 19 -b 1024K -always-use-fragments -noappend || exit
    elif [ $COMP_TYPE = "xz" ]; then
        time mksquashfs $SCRIPT_DIR/squashfs-root $MODULE-$COMP_TYPE.$BEXT -comp $COMP_TYPE -Xbcj x86 -b 1024K -always-use-fragments -noappend || exit
    else
        time mksquashfs $SCRIPT_DIR/squashfs-root $MODULE-$COMP_TYPE.$BEXT -comp $COMP_TYPE -b 1024K -always-use-fragments -noappend || exit
    fi
    rm -rf squashfs-root
    rm -f $OLD_MODULE
}

cd $SCRIPT_DIR
for MODULE in $(find $SCRIPT_DIR -name *.$BEXT); do
    OLD_COMP_TYPE=$(unsquashfs -s $MODULE | grep Compression | awk -F" " '{ print $2 }')
    repack_module
done
